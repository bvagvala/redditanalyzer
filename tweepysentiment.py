"""tweepy2.0

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ho7tW2gsIMxhgEiLJWqPRySgqROVMDff
"""
import datetime
import os
import tweepy as tw
import pandas as pd
import nltk
import re
import string
import random
from nltk.stem.wordnet import WordNetLemmatizer
from nltk.corpus import twitter_samples, stopwords
from nltk.tag import pos_tag
from nltk.tokenize import word_tokenize
from nltk import FreqDist, classify, NaiveBayesClassifier

consumer_key = 'ACzKQFArRsjxvdSsL1iuZrPR7'
consumer_secret = 'UAjx5OnYdmk9ioqXlQdBryqf1oypjnBjDjG4Lv6Yu21xbVRQpg'
access_token = '732715392-d9cBbx4aNWGIIq1E97uAH2cbDJZXsDBn0IsMADFo'
access_token_secret = 'IuJcBQbJoTFd9s3qJ0v732H82So3TNiE6p3pKVdIwjPOL'

auth = tw.OAuthHandler(consumer_key, consumer_secret)
auth.set_access_token(access_token, access_token_secret)
api = tw.API(auth, wait_on_rate_limit=True)

search_words = "#doge"

# date_since = "2021-05-19"
Total_number_of_tweets = 1000
new_search = search_words + " -filter:retweets"

now = datetime.datetime.now()
new = now - datetime.timedelta(minutes=60)
date_since = new.strftime("%Y-%m-%dt%H:%M:%Sz")
# print("date_since =", current_time)

# 2017-04-02t3:52z

nltk.download('twitter_samples')
nltk.download('punkt')
nltk.download('wordnet')
nltk.download('averaged_perceptron_tagger')
nltk.download('stopwords')


def remove_noise(tweet_tokens, stop_words=()):
    cleaned_tokens = []

    for token, tag in pos_tag(tweet_tokens):
        token = re.sub('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+#]|[!*\(\),]|' \
                       '(?:%[0-9a-fA-F][0-9a-fA-F]))+', '', token)
        token = re.sub("(@[A-Za-z0-9_]+)", "", token)

        if tag.startswith("NN"):
            pos = 'n'
        elif tag.startswith('VB'):
            pos = 'v'
        else:
            pos = 'a'

        lemmatizer = WordNetLemmatizer()
        token = lemmatizer.lemmatize(token, pos)

        if len(token) > 0 and token not in string.punctuation and token.lower() not in stop_words:
            cleaned_tokens.append(token.lower())
    return cleaned_tokens


def get_all_words(cleaned_tokens_list):
    for tokens in cleaned_tokens_list:
        for token in tokens:
            yield token


def get_tweets_for_model(cleaned_tokens_list):
    for tweet_tokens in cleaned_tokens_list:
        yield dict([token, True] for token in tweet_tokens)


a = 0
l = 0

new_positive_cleaned_tokens_list = None
new_negative_cleaned_tokens_list = None


def abcd(new_positive_cleaned_tokens_list, new_negative_cleaned_tokens_list, a, l):
    if __name__ == "__main__":

        # if a == 0:
        # positive_tweets = twitter_samples.strings('positive_tweets.json')
        # negative_tweets = twitter_samples.strings('negative_tweets.json')
        # text = twitter_samples.strings('tweets.20150430-223406.json')
        # tweet_tokens = twitter_samples.tokenized('positive_tweets.json')[0]

        stop_words = stopwords.words('english')

        if a == 0:
            positive_tweet_tokens = twitter_samples.tokenized('positive_tweets.json')
            positive_cleaned_tokens_list = []
            for tokens in positive_tweet_tokens:
                positive_cleaned_tokens_list.append(remove_noise(tokens, stop_words))

            positive_cleaned_tokens_list = positive_cleaned_tokens_list
        else:

            positive_cleaned_tokens_list = positive_cleaned_tokens_list + new_positive_cleaned_tokens_list

        if l == 0:

            negative_tweet_tokens = twitter_samples.tokenized('negative_tweets.json')
            negative_cleaned_tokens_list = []
            for tokens in negative_tweet_tokens:
                negative_cleaned_tokens_list.append(remove_noise(tokens, stop_words))
                negative_cleaned_tokens_list = negative_cleaned_tokens_list
        else:
            negative_cleaned_tokens_list = negative_cleaned_tokens_list + new_negative_cleaned_tokens_list

        #     all_pos_words = get_all_words(positive_cleaned_tokens_list)

        #     freq_dist_pos = FreqDist(all_pos_words)
        #     print(freq_dist_pos.most_common(10))

        positive_tokens_for_model = get_tweets_for_model(positive_cleaned_tokens_list)
        negative_tokens_for_model = get_tweets_for_model(negative_cleaned_tokens_list)

        positive_dataset = [(tweet_dict, "Positive")
                            for tweet_dict in positive_tokens_for_model]

        negative_dataset = [(tweet_dict, "Negative")
                            for tweet_dict in negative_tokens_for_model]

        dataset = positive_dataset + negative_dataset

        random.shuffle(dataset)

        print(len(dataset))

        length_of_split = int(len(dataset) * 0.7)

        train_data = dataset[:length_of_split]
        test_data = dataset[length_of_split:]

        classifier = NaiveBayesClassifier.train(train_data)

        print("Accuracy is:", classify.accuracy(classifier, test_data))

        #     print(classifier.show_most_informative_features(10))

        #     custom_tweet = "I ordered just once from TerribleCo, they screwed up, never used the app again."

        #     custom_tokens = remove_noise(word_tokenize(custom_tweet))

        #     print(custom_tweet, classifier.classify(dict([token, True] for token in custom_tokens)))

        # Define the search term and the date_since date as variables

        tweets = tw.Cursor(api.search,
                           q=new_search,
                           lang="en",
                           since=date_since).items(Total_number_of_tweets)

        users_locs = [[tweet.text, tweet.user.screen_name, tweet.user.location] for tweet in tweets]
        users_locs

        newdf = pd.DataFrame(data=users_locs, columns=['tweet', 'author', 'location'])
        newdf

        b = 0
        s = 0
        h = 0
        p = 0
        q = 0

        new_positive_cleaned_tokens_list = []
        new_negative_cleaned_tokens_list = []

        for i in range(Total_number_of_tweets):
            custom_tweet = newdf['tweet'][i]

            custom_tokens = remove_noise(word_tokenize(custom_tweet), stop_words)

            for token in custom_tokens:
                if token == 'buy':
                    b = b + 1
                if token == 'sell':
                    s = s + 1

                if token == 'hold':
                    h = h + 1

            x = classifier.classify(dict([token, True] for token in custom_tokens))

            if x == 'Positive':
                p = p + 1
                a = a + 1
                new_positive_cleaned_tokens_list.append(custom_tokens)
            #                 new_positive_tokens_for_model = get_tweets_for_model(positive_cleaned_tokens_list)

            else:
                q = q + 1
                l = l + 1
                new_negative_cleaned_tokens_list.append(custom_tokens)

        import matplotlib.pyplot as plt
        fig = plt.figure()
        ax = fig.add_axes([0, 0, 1, 1])
        xaxis = ['Positive', 'Negative']
        yaxis = [p, q]
        ax.bar(xaxis, yaxis)
        plt.show()
        plt.savefig('posneg.png')

        import matplotlib.pyplot as plt
        fig = plt.figure()
        ax = fig.add_axes([0, 0, 1, 1])
        xaxis = ['Buy', 'Sell', 'Hold']
        yaxis = [b, s, h]
        ax.bar(xaxis, yaxis)
        plt.show()
        plt.savefig('buysellhold.png')
    return new_positive_cleaned_tokens_list, new_negative_cleaned_tokens_list, a, l
